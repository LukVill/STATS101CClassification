# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term:
train %>% dplyr::select(loan_term) %>% summary()
train %>% dplyr::select(loan_term) %>% n_distinct()
help("n_distinct")
train %>% dplyr::select(loan_term) %>% distinct()
# total_points and fees: remove col, just NA's
# train %>% pull(total_points_and_fees) %>% unique()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory:
train %>% dplyr::select(introductory_rate_period)
# total_points and fees: remove col, just NA's
# train %>% pull(total_points_and_fees) %>% unique()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory:
train %>% pull(introductory_rate_period)
# total_points and fees: remove col, just NA's
# train %>% pull(total_points_and_fees) %>% unique()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory:
train %>% pull(introductory_rate_period) %>% unique()
train %>% pull(introductory_rate_period)
train %>% dplyr::select(total_units) %>% distinct()
train %>% dplyr::select(total_units) %>% n_distinct()
# total_points and fees: remove col, just NA's
# train %>% pull(total_points_and_fees) %>% unique()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory:
train %>% pull(introductory_rate_period) %>% unique()
train %>% pull(introductory_rate_period)
# total_points and fees: remove col, just NA's
# train %>% pull(total_points_and_fees) %>% unique()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode ( )
train %>% pull(introductory_rate_period) %>% uniqueN()
# total_points and fees: remove col, just NA's
# train %>% pull(total_points_and_fees) %>% unique()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode ( )
train %>% dplyr::select(introductory_rate_period) %>% n_distinct()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode (31 categories)
# train %>% dplyr::select(introductory_rate_period) %>% n_distinct()
# property:
train %>% pull(property_value)
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode (31 categories)
# train %>% dplyr::select(introductory_rate_period) %>% n_distinct()
# property:
train %>% dplyr::select(property_value) %>% n_distinct()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode (31 categories)
# train %>% dplyr::select(introductory_rate_period) %>% n_distinct()
# property:
train %>% dplyr::select(property_value) %>% distinct()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode (31 categories)
# train %>% dplyr::select(introductory_rate_period) %>% n_distinct()
# property:
train %>% dplyr::select(property_value) %>% summary()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode (31 categories)
# train %>% dplyr::select(introductory_rate_period) %>% n_distinct()
# property: impute via KNN (4916 nas)
# train %>% dplyr::select(property_value) %>% summary()
# multifamily:
train %>% dplyr::select(multifamily_affordable_units) %>% summary()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode (31 categories)
# train %>% dplyr::select(introductory_rate_period) %>% n_distinct()
# property: impute via KNN (4916 nas)
# train %>% dplyr::select(property_value) %>% summary()
# multifamily:
train %>% dplyr::select(multifamily_affordable_units) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode (31 categories)
# train %>% dplyr::select(introductory_rate_period) %>% n_distinct()
# property: impute via KNN (4916 nas)
# train %>% dplyr::select(property_value) %>% summary()
# multifamily:
train %>% dplyr::select(multifamily_affordable_units) %>% distinct()
# total_points and fees: remove col, just NA's
# train %>% pull(total_points_and_fees) %>% unique()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode (31 categories)
train %>% dplyr::select(introductory_rate_period) %>% count()
train %>% dplyr::select(introductory_rate_period)
# total_points and fees: remove col, just NA's
# train %>% pull(total_points_and_fees) %>% unique()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: dummy encode (31 categories)
train %>% dplyr::select(introductory_rate_period) %>% mutate(isNA = is.na(introductory_rate_period)) %>% group_by(isNA) %>% count()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: remove col (too little observations to be significant predictor)
# train %>% dplyr::select(introductory_rate_period) %>% mutate(isNA = is.na(introductory_rate_period)) %>% group_by(isNA) %>% count()
# property: impute via KNN (4916 nas)
# train %>% dplyr::select(property_value) %>% summary()
# multifamily:
train %>% dplyr::select(multifamily_affordable_units) %>% distinct()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: remove col (too little observations to be significant predictor)
# train %>% dplyr::select(introductory_rate_period) %>% mutate(isNA = is.na(introductory_rate_period)) %>% group_by(isNA) %>% count()
# property: impute via KNN (4916 nas)
# train %>% dplyr::select(property_value) %>% summary()
# multifamily:
train %>% dplyr::select(multifamily_affordable_units) %>% mutate(isNA = is.na(introductory_rate_period)) %>% group_by(isNA) %>% count()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: remove col (too little observations to be significant predictor)
# train %>% dplyr::select(introductory_rate_period) %>% mutate(isNA = is.na(introductory_rate_period)) %>% group_by(isNA) %>% count()
# property: impute via KNN (4916 nas)
# train %>% dplyr::select(property_value) %>% summary()
# multifamily:
train %>% dplyr::select(multifamily_affordable_units) %>% mutate(isNA = is.na(multifamily_affordable_units)) %>% group_by(isNA) %>% count()
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: remove col (too little observations to be significant predictor)
# train %>% dplyr::select(introductory_rate_period) %>% mutate(isNA = is.na(introductory_rate_period)) %>% group_by(isNA) %>% count()
# property: impute via KNN (4916 nas)
# train %>% dplyr::select(property_value) %>% summary()
# multifamily: remove col, too little observations
# train %>% dplyr::select(multifamily_affordable_units) %>% mutate(isNA = is.na(multifamily_affordable_units)) %>% group_by(isNA) %>% count()
# automated:
train %>% dplyr::select(automated_underwriting_system_1) %>% unique()
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: remove col (too little observations to be significant predictor)
# train %>% dplyr::select(introductory_rate_period) %>% mutate(isNA = is.na(introductory_rate_period)) %>% group_by(isNA) %>% count()
# property: impute via KNN (4916 nas)
# train %>% dplyr::select(property_value) %>% summary()
# multifamily: remove col, too little observations
# train %>% dplyr::select(multifamily_affordable_units) %>% mutate(isNA = is.na(multifamily_affordable_units)) %>% group_by(isNA) %>% count()
# automated:
train %>% dplyr::select(automated_underwriting_system_1) %>% mutate(isNA = is.na(automated_underwriting_system_1)) %>% group_by(isNA) %>% count()
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: remove col (too little observations to be significant predictor)
# train %>% dplyr::select(introductory_rate_period) %>% mutate(isNA = is.na(introductory_rate_period)) %>% group_by(isNA) %>% count()
# property: impute via KNN (4916 nas)
# train %>% dplyr::select(property_value) %>% summary()
# multifamily: remove col, too little observations
# train %>% dplyr::select(multifamily_affordable_units) %>% mutate(isNA = is.na(multifamily_affordable_units)) %>% group_by(isNA) %>% count()
# automated:
train %>% dplyr::select(automated_underwriting_system_2) %>% mutate(isNA = is.na(automated_underwriting_system_2)) %>% group_by(isNA) %>% count()
# loan_term: remove rows with NA loan_term
# train %>% dplyr::select(loan_term) %>% summary()
# train %>% dplyr::select(loan_term) %>% distinct()
# introductory: remove col (too little observations to be significant predictor)
# train %>% dplyr::select(introductory_rate_period) %>% mutate(isNA = is.na(introductory_rate_period)) %>% group_by(isNA) %>% count()
# property: impute via KNN (4916 nas)
# train %>% dplyr::select(property_value) %>% summary()
# multifamily: remove col, too little observations
# train %>% dplyr::select(multifamily_affordable_units) %>% mutate(isNA = is.na(multifamily_affordable_units)) %>% group_by(isNA) %>% count()
# automated:
train %>% dplyr::select(automated_underwriting_system_2) %>% distinct()
loan_app_race_freq_plot
recipe(action_taken ~ ., data = train) %>% step_dummy(state)
recipe(action_taken ~ ., data = train) %>% step_dummy(state) %>% prep()
recipe(action_taken ~ ., data = train) %>% step_dummy(state) %>% prep() %>% bake(new_data = NULL)
# race of columns: first, remove the rows that have race_1 NA, then set all cols with race_of with NA = 7, then dummy encode
# age of columns: dummy encoding to represent age over 62 bool
# income: impute via knn
# total_points and fees: remove col, its just NA's
# train %>% pull(total_points_and_fees) %>% unique()
# prepayment: change to character and then dummy encode (either 36 or NA)
# train %>% pull(prepayment_penalty_term) %>% unique()
# combined: impute via knn
# train %>% pull(combined_loan_to_value_ratio)
# loan_term: remove rows with NA loan_term
train %>% dplyr::select(loan_term) %>% summary()
# PROBLEM: REPRESENTATION OF CATEGORIES
# RESULT: dummy encode the following columns
# loan_type, loan_purpose, preapproval, construction_method, occupancy_type,
train %>% dplyr::select(loan_amount)
# PROBLEM: REPRESENTATION OF CATEGORIES
# RESULT: dummy encode the following columns
# loan_type, loan_purpose, preapproval, construction_method, occupancy_type,
train %>% dplyr::select(loan_amount) %>% filter(is.na(loan_amount))
# PROBLEM: REPRESENTATION OF CATEGORIES
# RESULT: dummy encode the following columns
# loan_type, loan_purpose, preapproval, construction_method, occupancy_type, sex cols,
train %>% dplyr::select(rate_spread) %>% distinct()
# PROBLEM: REPRESENTATION OF CATEGORIES
# RESULT: dummy encode the following columns
# loan_type, loan_purpose, preapproval, construction_method, occupancy_type, sex cols, hoepa, lien
train %>% dplyr::select(hoepa_status) %>% distinct()
# PROBLEM: REPRESENTATION OF CATEGORIES
# RESULT: dummy encode the following columns
# loan_type, loan_purpose, preapproval, construction_method, occupancy_type, sex cols, hoepa, lien
train %>% dplyr::select(lien_status) %>% distinct()
# PROBLEM: REPRESENTATION OF CATEGORIES
# RESULT: dummy encode the following columns
# loan_type, loan_purpose, preapproval, construction_method, occupancy_type, sex cols, hoepa_status, lien_status, applicant_credit_scoring_model, co_
train %>% dplyr::select(co_applicant_or_co_borrower_name_and_version_of_credit_scoring_model) %>% distinct()
# PROBLEM: REPRESENTATION OF CATEGORIES
# RESULT: dummy encode the following columns
# loan_type, loan_purpose, preapproval, construction_method, occupancy_type, sex cols, hoepa_status, lien_status, applicant_credit_scoring_model, co_applicant_credit_scoring_model, balloon_payment, interest_only_payments, negative_amortization, other_non_amortizing_features, manufactured_home_secured_property_type,manufactured_home_land_property_interest, submission_of_application, initially_payable_to_your_institution, reverse_mortgage, open_end_line_of_credit, business_or_commercial_purpose
view(colnames(train))
# RESULT:
# remove ID and identifier
# remove age of applicant and co applicant (they have encoded bool dummies cols already)
train %>% dplyr::select(age_of_applicant_or_borrower) %>% distinct()
# RESULT:
# remove ID and identifier
# dummy encode age_of_applicant_or_borrower and age_of_co_applicant_or_co_borrower
train %>% dplyr::select(age_of_applicant_or_borrower) %>% distinct()
# RESULT:
# remove ID and identifier
# dummy encode age_of_applicant_or_borrower and age_of_co_applicant_or_co_borrower
train %>% dplyr::select(age_of_co_applicant_or_co_borrower) %>% distinct()
train %>% dplyr::select(total_units) %>% n_distinct()
train %>% dplyr::select(total_units)
# PROBLEM: character columns
train %>% select_if(is.character)
loan_app_race_freq_plot <- race_df %>% ggplot() +
geom_bar(aes(x = race, y = count), stat = "identity", fill = "lightblue", color = "grey") +
labs(title = "Loan Applicant's Primary Race Frequencies", x = "Race ID", caption = cap_str, y = "Frequency") +
theme(plot.caption = element_text(size = 9, hjust = 0))
loan_app_race_freq_plot
loan_app_race_freq_plot <- race_df %>% ggplot() +
geom_bar(aes(x = race, y = count), stat = "identity", fill = "lightblue", color = "grey") +
labs(title = "Loan Applicant's Primary Race Frequencies", x = "Race ID", caption = cap_str, y = "Frequency") +
theme(plot.caption = element_text(size = 9, hjust = 0)) + theme_minimal()
loan_app_race_freq_plot
train %>% dplyr::select(race_of_applicant_or_borrower_5) %>% distinct()
train %>% dplyr::select(race_of_applicant_or_borrower_5) %>% summary()
train %>% dplyr::select(race_of_applicant_or_borrower_5) %>% summary()
train %>% select_if(function(x) any(is.na(x))) %>% colnames()
# ANALYZE property_value
train %>% pull(property_value) %>% summary()
# ANALYZE property_value
train %>% dplyr::select(property_value) %>% ggplot() %>% geom_histogram(aes(x = property_value))
# ANALYZE property_value
train %>% dplyr::select(property_value) %>% ggplot() + geom_histogram(aes(x = property_value))
# ANALYZE property_value
train %>% dplyr::select(property_value) %>% ggplot() + geom_histogram(aes(x = property_value), bins = 10)
# ANALYZE property_value
train %>% dplyr::select(property_value) %>% ggplot() + geom_boxplot(aes(x = property_value))
# ANALYZE: combined_loan_to_value_ratio
train %>% dplyr::select(combined_loan_to_value_ratio) %>% summary()
# ANALYZE: combined_loan_to_value_ratio
train %>% dplyr::select(combined_loan_to_value_ratio) %>% ggplot() + geom_histogram(aes(x = combined_loan_to_value_ratio), bins = 10)
# ANALYZE: combined_loan_to_value_ratio
train %>% dplyr::select(combined_loan_to_value_ratio) %>% ggplot() + geom_boxplot(aes(x = combined_loan_to_value_ratio))
# remove unnecessary cols
train %>% select(-c(activity_year, legal_entity_identifier_lei, total_points_and_fees, introductory_rate_period, multifamily_affordable_units))
# remove unnecessary cols
train %>% select(-activity_year, -legal_entity_identifier_lei, -total_points_and_fees, -introductory_rate_period, -multifamily_affordable_units)
# remove unnecessary cols
train %>% select(-c("activity_year", "legal_entity_identifier_lei", "total_points_and_fees", "introductory_rate_period", "multifamily_affordable_units"))
# remove unnecessary cols
train %>% dplyr::select(-c("activity_year", "legal_entity_identifier_lei", "total_points_and_fees", "introductory_rate_period", "multifamily_affordable_units"))
# remove unnecessary cols
train %>% dplyr::select(-c("id","activity_year", "legal_entity_identifier_lei", "total_points_and_fees", "introductory_rate_period", "multifamily_affordable_units"))
# makes it easier to implement model
# TRAINING DATA
# remove unnecessary cols
train <- train %>% dplyr::select(-c("id","activity_year", "legal_entity_identifier_lei", "total_points_and_fees", "introductory_rate_period", "multifamily_affordable_units"))
# group numeric cols together in the beginning (income, loan_amount, property_value, combined_loan_to_value_ratio)
train <- train %>% relocate(income, .before = loan_type) %>% relocate(loan_amount, .before = loan_type) %>% relocate(property_value, .before = loan_type) %>% relocate(combined_loan_to_value_ratio, .before = loan_type)
# TESTING DATA
# remove unnecessary cols
test <- test %>% dplyr::select(-c("id","activity_year", "legal_entity_identifier_lei", "total_points_and_fees", "introductory_rate_period", "multifamily_affordable_units"))
# group numeric cols together in the beginning (income, loan_amount, property_value, combined_loan_to_value_ratio)
test <- test %>% relocate(income, .before = loan_type) %>% relocate(loan_amount, .before = loan_type) %>% relocate(property_value, .before = loan_type) %>% relocate(combined_loan_to_value_ratio, .before = loan_type)
train
help(step_filter)
rec1 <- recipe(action_taken ~ ., data = train)
# making new training dataset that changes 3's into 2's
rec2 <- recipe(action_taken ~ ., data = train) %>% step_mutate_at(action_taken, fn = function(x) if_else(x == 3, 2, 1))
# SET WHICH RECIPE TO USE
rec <- rec2
# SUMMARY OF RECIPE:
# removing: id, activity_year, legal_entity_identifier_lei, total_points_and_fees, introductory_rate_period, multifamily_affordable_units,
# filter NA: ethnicity_of_applicant_or_borrower_1, ethnicity_of_co_applicant_or_co_borrower_1, loan_term
train %>% dplyr::select(ethnicity_of_applicant_or_borrower_1) %>% summary()
# SUMMARY OF RECIPE:
# removing: id, activity_year, legal_entity_identifier_lei, total_points_and_fees, introductory_rate_period, multifamily_affordable_units,
# filter NA: ethnicity_of_applicant_or_borrower_1, ethnicity_of_co_applicant_or_co_borrower_1, loan_term
train %>% dplyr::select(race_of_applicant_or_borrower_1) %>% summary()
# SUMMARY OF RECIPE:
# removing: id, activity_year, legal_entity_identifier_lei, total_points_and_fees, introductory_rate_period, multifamily_affordable_units,
# filter NA: ethnicity_of_applicant_or_borrower_1, ethnicity_of_co_applicant_or_co_borrower_1, loan_term
train %>% dplyr::select(loan_term) %>% summary()
# SUMMARY OF RECIPE:
# removing: id, activity_year, legal_entity_identifier_lei, total_points_and_fees, introductory_rate_period, multifamily_affordable_units,
# filter NA: ethnicity_of_applicant_or_borrower_1, ethnicity_of_co_applicant_or_co_borrower_1, loan_term
train %>% dplyr::select(loan_term) %>% unique()
rec %>% step_mutate_at(starts_with("ethnicity_of"), fn = function(x) if_else(is.na(x), 4, x)) %>% prep() %>% bake(new_data = NULL)
train
rec %>% step_mutate_at(starts_with("ethnicity_of"), fn = function(x) if_else(is.na(x), 4, x)) %>% prep() %>% bake(new_data = NULL)
na_test <- read_csv("na.csv")
na_test
na_test$predictor <- as.character(na_test$predictor)
na_test
ggplot() %>% geom_bar(aes(x = predictor, y = NAs), stat = "identity")
ggplot() + geom_bar(aes(x = predictor, y = NAs), stat = "identity")
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity")
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90))
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 11))
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 8))
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 5))
na_test$predictor <- as.numeric(na_test$predictor)
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 5))
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 5)) + scale_x_continuous(breaks = predictor)
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 5))
na_test$predictor <- as.factor(na_test$predictor)
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 5)) + scale_x_continuous(breaks = predictor)
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 5))
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 8))
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 7))
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 6))
ggplot(na_test) + geom_bar(aes(x = predictor, y = NAs), stat = "identity") + theme(axis.text.x = element_text(angle = 90, size = 6)) + labs(title = "Amount of NA's in each Predictor Variable", x = "Predictor ID", y = "Amount")
loan_app_race_freq_plot <- race_df %>% ggplot() +
geom_bar(aes(x = race, y = count), stat = "identity", fill = "lightblue", color = "grey") +
labs(title = "Loan Applicant's Primary Race Frequencies", x = "Race ID", caption = cap_str, y = "Frequency") +
theme(plot.caption = element_text(size = 9, hjust = 0)) + theme_minimal()
loan_app_race_freq_plot
loan_app_race_freq_plot <- race_df %>% ggplot() +
geom_bar(aes(x = race, y = count), stat = "identity", fill = "lightblue", color = "grey") +
labs(title = "Loan Applicant's Primary Race Frequencies", x = "Race ID", caption = cap_str, y = "Frequency") +
theme(plot.caption = element_text(size = 9, hjust = 0)) + theme_minimal()
loan_app_race_freq_plot
loan_app_race_freq_plot <- race_df %>% ggplot() +
geom_bar(aes(x = race, y = count), stat = "identity", fill = "lightblue", color = "grey") +
labs(title = "Loan Applicant's Primary Race Frequencies", x = "Race ID", caption = cap_str, y = "Frequency") +
theme(plot.caption = element_text(size = 9, hjust = 0)) + theme_minimal()
loan_app_race_freq_plot
help("discrim_flexible")
colsToRemove <- c("id","activity_year", "legal_entity_identifier_lei", "total_points_and_fees", "introductory_rate_period", "multifamily_affordable_units")
help("step_impute_knn")
colsToRemove <- c("id","activity_year", "legal_entity_identifier_lei", "total_points_and_fees", "introductory_rate_period", "multifamily_affordable_units", "ethnicity_of_co_applicant_or_co_borrower_4", "ethnicity_of_co_applicant_or_co_borrower_5", "race_of_co_applicant_or_co_borrower_4", "race_of_co_applicant_or_co_borrower_5")
rec %>% step_impute_knn(vars(income, combined_loan_to_value_ratio, property_value)) %>% prep() %>% bake(new_data = NULL)
normalize_neg1_pos1(seq(-10,5))
# umm, why are there negative incomes? for people in debt?
# get which people are negative incomes, plot their loan status
train %>% filter(income < 0) %>% ggplot() + geom_bar(aes(x = action_taken)) + labs(title = "Action_Taken for Applicants with Negative Income", x = "Action_Taken (1 = Loan Approve, 3 = Loan Denied)", y = "Frequency")
lab_income_plot <- lab_income_train %>% filter(posIncome == TRUE) %>% ggplot(aes(x = income)) + geom_bar(stat = "identity", position = "identity")
rec %>% step_impute_knn(income, combined_loan_to_value_ratio, property_value) %>% prep() %>% bake(new_data = NULL)
head(train, n = 100)
rec %>% step_impute_knn(income, combined_loan_to_value_ratio, property_value) %>% prep(training = head(train, n = 100)) %>% bake(new_data = NULL)
head(train, n = 100)
rec %>% step_impute_knn(income, combined_loan_to_value_ratio, property_value) %>% prep(training = head(train, n = 100)) %>% bake(new_data = NULL)
head(train, n = 100)
rec %>% step_impute_knn(income, combined_loan_to_value_ratio, property_value) %>% prep(training = head(train, n = 100)) %>% bake(new_data = NULL)
rec %>% step_mutate_at(income:combined_loan_to_value_ratio, fn = 5) %>% prep(training = head(train, n = 100)) %>% bake(new_data = NULL)
rec %>% step_mutate_at(income:combined_loan_to_value_ratio, fn = function(x) x = 5) %>% prep(training = head(train, n = 100)) %>% bake(new_data = NULL)
rec %>% step_mutate_at(income:property_value, fn = function(x) x = 5) %>% prep(training = head(train, n = 100)) %>% bake(new_data = NULL)
colnames(train)
# SET THE WD TO YOUR FOLDER
trainFilepath <- paste0(getwd(),"/train2.csv")
testFilepath <- paste0(getwd(),"/test2.csv")
metadataFilepath <- paste0(getwd(),"/metadata.csv")
train <- read.csv(trainFilepath)
test <- read.csv(testFilepath)
metadata <- read.csv(metadataFilepath)
# makes it easier to implement model
colsToRemove <- c("id","activity_year", "legal_entity_identifier_lei", "total_points_and_fees", "introductory_rate_period", "multifamily_affordable_units", "ethnicity_of_co_applicant_or_co_borrower_4", "ethnicity_of_co_applicant_or_co_borrower_5", "race_of_co_applicant_or_co_borrower_4", "race_of_co_applicant_or_co_borrower_5")
# TRAINING DATA
# remove unnecessary cols
train <- train %>% dplyr::select(-colsToRemove)
# group numeric cols together in the beginning (income, loan_amount, property_value, combined_loan_to_value_ratio)
train <- train %>% relocate(income, .before = loan_type) %>% relocate(loan_amount, .before = loan_type) %>% relocate(property_value, .before = loan_type) %>% relocate(combined_loan_to_value_ratio, .before = loan_type)
# TESTING DATA
# remove unnecessary cols
test <- test %>% dplyr::select(-colsToRemove)
# group numeric cols together in the beginning (income, loan_amount, property_value, combined_loan_to_value_ratio)
test <- test %>% relocate(income, .before = loan_type) %>% relocate(loan_amount, .before = loan_type) %>% relocate(property_value, .before = loan_type) %>% relocate(combined_loan_to_value_ratio, .before = loan_type)
train
# NOTE: don't run the entire script, the var name "train_split" will be shared
set.seed(101)
# stratify the response variable because uneven distribution of classes
train_split <- train %>% initial_split(strata = action_taken)
train_train <- training(train_split)
train_test <- testing(train_split)
# always going to stratify by response variable
train_folds <- vfold_cv(train_train, v = 10, strata = action_taken)
rec1 <- recipe(action_taken ~ ., data = train_train)
# making new training dataset that changes 3's into 2's
rec2 <- recipe(action_taken ~ ., data = train_train) %>% step_mutate_at(action_taken, fn = function(x) if_else(x == 3, 2, 1))
# head(rec2 %>% prep() %>% bake(new_data = NULL) %>% select(action_taken), n =20)
# SET WHICH RECIPE TO USE
rec <- rec2
# original recipe
rec <- rec %>%
# filtering NA's from predictors with few NA's
step_filter(!is.na(loan_term)) %>%
# mutating in prep for dummy encoding
step_mutate_at(starts_with("ethnicity_of"), fn = function(x) if_else(is.na(x), 4, x)) %>%
step_mutate_at(starts_with("race_of"), fn = function(x) if_else(is.na(x), 7, x)) %>%
step_mutate_at(starts_with("automated_underwriting_system"), fn = function(x) if_else(is.na(x), 6, x)) %>%
# imputation of numeric variables
step_impute_knn(income, combined_loan_to_value_ratio, property_value) %>%
# transformation of numeric variables
step_log(loan_amount, income, combined_loan_to_value_ratio, property_value) %>%
# dummy encoding of nominal variables
step_dummy(loan_type:business_or_commercial_purpose)
# decision_tree_model <- decision_tree(cost_complexity = tune()) %>% set_engine("rpart") %>% set_mode("classification")
boost_tree_model <- boost_tree(learn_rate = tune()) %>% set_engine("xgboost") %>% set_mode("classification")
# r_forest_model <- rand_forest(min_n = tune()) %>% set_engine("ranger") %>% set_mode("classification")
nn_model <- bag_mlp(hidden_units = tune(), epochs = 500) %>% set_engine("nnet") %>% set_mode("classification")
lin_disc_model <- discrim_linear() %>% set_engine("MASS") %>% set_mode("classification")
flex_lin_disc_model <- discrim_flexible(num_terms = tune(), prod_degree = tune()) %>% set_engine("earth") %>% set_mode("classification")
log_model <- logistic_reg() %>% set_engine("glmnet") %>% set_mode("classification")
multi_nn_model <- mlp(hidden_units = 3, epochs = 500, learn_rate = tune(), activation = "relu") %>% set_engine("brulee") %>% set_mode("classification") %>% translate()
model_list <- list(boost_tree_model = boost_tree_model, nn_model = nn_model, lin_disc_model = lin_disc_model, flex_lin_disc_model = flex_lin_disc_model, log_model = log_model, multi_nn_model = multi_nn_model)
# always going to stratify by response variable
train_folds <- vfold_cv(train_train, v = 10, strata = action_taken)
wf_metrics <- metric_set(roc_auc, f_meas)
rec
# test recipe
test <- rec %>% prep() %>% bake(new_data = NULL)
